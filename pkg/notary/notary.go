// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package notary

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NotaryABI is the input ABI used to generate the binding from.
const NotaryABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"appId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ApplicationRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"AssetClaimRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"AssetDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"AssetNewClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"oldNetwork\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"newNetwork\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AssetOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"AssetUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"applicationByDescription\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"deleteFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes16\",\"name\":\"nonce\",\"type\":\"bytes16\"}],\"name\":\"onBehalfOfSignHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingTransfers\",\"outputs\":[{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingTransfersTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"appId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"registerApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes16\",\"name\":\"nonce\",\"type\":\"bytes16\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"registerAssetOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"currentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"newNetwork\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"}],\"name\":\"rejectOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"app\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pathSpec\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"claimAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"}],\"name\":\"acceptClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"}],\"name\":\"rejectClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enumAbstractNotary.Network\",\"name\":\"myNetwork\",\"type\":\"uint8\"}],\"name\":\"deleteAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// NotaryBin is the compiled bytecode used for deploying new contracts.
var NotaryBin = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550436007819055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550614ccb806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639b19251a116100c3578063c63a4d421161007c578063c63a4d4214610ad7578063d278d86414610b8e578063e43252d714610bc9578063ec11498e14610c0d578063ecfb5d1714610c48578063ed5decd614610c8c57610158565b80639b19251a1461069d5780639c7331cd146106f75780639f5d6fc2146107a45780639fda5b6614610851578063b57262021461093e578063be3dfeca146109eb57610158565b80634bf87862116101155780634bf878621461037657806354c7bd8c1461042e57806368111160146104b457806373fc84201461055e5780638d4ab2c01461057c5780638da5cb5b1461066957610158565b8063151b29d01461015d5780632e2a92801461019857806341c0e1b514610200578063424aaec21461020a57806343f455691461026957806349f60a821461033b575b600080fd5b6101966004803603604081101561017357600080fd5b8101908080359060200190929190803560ff169060200190929190505050610cce565b005b6101fe600480360360808110156101ae57600080fd5b8101908080359060200190929190803560ff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eed565b005b610208611499565b005b6102536004803603604081101561022057600080fd5b810190808035906020019092919080356fffffffffffffffffffffffffffffffff19169060200190929190505050611556565b6040518082815260200191505060405180910390f35b6103226004803603602081101561027f57600080fd5b810190808035906020019064010000000081111561029c57600080fd5b8201836020820111156102ae57600080fd5b803590602001918460018302840111640100000000831117156102d057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506115d4565b604051808260ff16815260200191505060405180910390f35b6103746004803603604081101561035157600080fd5b8101908080359060200190929190803560ff16906020019092919050505061160a565b005b61042c6004803603602081101561038c57600080fd5b81019080803590602001906401000000008111156103a957600080fd5b8201836020820111156103bb57600080fd5b803590602001918460208302840111640100000000831117156103dd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061187d565b005b6104b26004803603604081101561044457600080fd5b81019080803560ff1690602001909291908035906020019064010000000081111561046e57600080fd5b82018360208201111561048057600080fd5b803590602001918460018302840111640100000000831117156104a257600080fd5b9091929391929390505050611997565b005b6104e3600480360360208110156104ca57600080fd5b81019080803560ff169060200190929190505050611c47565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610523578082015181840152602081019050610508565b50505050905090810190601f1680156105505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610566611cf7565b6040518082815260200191505060405180910390f35b6105a86004803603602081101561059257600080fd5b8101908080359060200190929190505050611cfd565b604051808660028111156105b857fe5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018460ff168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561062a57808201518184015260208101905061060f565b50505050905090810190601f1680156106575780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b610671611e15565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106df600480360360208110156106b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e39565b60405180821515815260200191505060405180910390f35b6107a2600480360360a081101561070d57600080fd5b81019080803560ff16906020019092919080359060200190929190803560ff1690602001909291908035906020019064010000000081111561074e57600080fd5b82018360208201111561076057600080fd5b8035906020019184600183028401116401000000008311171561078257600080fd5b9091929391929390803563ffffffff169060200190929190505050611e59565b005b61084f600480360360a08110156107ba57600080fd5b8101908080359060200190929190803560ff169060200190929190803560ff169060200190929190803590602001906401000000008111156107fb57600080fd5b82018360208201111561080d57600080fd5b8035906020019184600183028401116401000000008311171561082f57600080fd5b9091929391929390803563ffffffff169060200190929190505050612377565b005b61087d6004803603602081101561086757600080fd5b810190808035906020019092919050505061295f565b6040518086600281111561088d57fe5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018460ff168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156108ff5780820151818401526020810190506108e4565b50505050905090810190601f16801561092c5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6109e9600480360360a081101561095457600080fd5b8101908080359060200190929190803560ff169060200190929190803560ff1690602001909291908035906020019064010000000081111561099557600080fd5b8201836020820111156109a757600080fd5b803590602001918460018302840111640100000000831117156109c957600080fd5b9091929391929390803563ffffffff169060200190929190505050612a77565b005b610ad56004803603610120811015610a0257600080fd5b81019080803560ff169060200190929190803590602001909291908035906020019092919080356fffffffffffffffffffffffffffffffff19169060200190929190803560ff16906020019092919080359060200190929190803560ff16906020019092919080359060200190640100000000811115610a8157600080fd5b820183602082011115610a9357600080fd5b80359060200191846001830284011164010000000083111715610ab557600080fd5b9091929391929390803563ffffffff169060200190929190505050612e8a565b005b610b8c600480360360c0811015610aed57600080fd5b81019080803560ff1690602001909291908035906020019092919080359060200190929190803560ff16906020019092919080359060200190640100000000811115610b3857600080fd5b820183602082011115610b4a57600080fd5b80359060200191846001830284011164010000000083111715610b6c57600080fd5b9091929391929390803563ffffffff1690602001909291905050506134bd565b005b610bc760048036036040811015610ba457600080fd5b8101908080359060200190929190803560ff169060200190929190505050613c97565b005b610c0b60048036036020811015610bdf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613fd1565b005b610c4660048036036040811015610c2357600080fd5b8101908080359060200190929190803560ff1690602001909291905050506140eb565b005b610c8a60048036036020811015610c5e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061440d565b005b610cb860048036036020811015610ca257600080fd5b8101908080359060200190929190505050614527565b6040518082815260200191505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180614c0f6034913960400191505060405180910390fd5b806002811115610d9457fe5b6002600084815260200190815260200160002060000160009054906101000a900460ff166002811115610dc357fe5b14610e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180614c0f6034913960400191505060405180910390fd5b60026000838152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160156101000a81549060ff0219169055600182016000610e8c9190614aa9565b6002820160006101000a81549063ffffffff021916905550506003600083815260200190815260200160002060009055817f6137dc9923baf8633ade74cf103f8dd5f29a8948866faa456fd527e5aa23261360405160405180910390a25050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b848433816002811115610fa057fe5b6001600085815260200190815260200160002060000160009054906101000a900460ff166002811115610fcf57fe5b14611042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6173736574206e6f74206f776e656420627920746865206e6574776f726b000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611119576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6173736574206e6f74206f776e6564000000000000000000000000000000000081525060200191505060405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f617373657420616c726561647920636c61696d6564000000000000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180614c43602b913960400191505060405180910390fd5b6040518060a0016040528088600281111561128e57fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160ff80168152602001604051806020016040528060008152508152602001600063ffffffff16815250600260008b815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600281111561130f57fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160000160156101000a81548160ff021916908360ff1602179055506060820151816001019080519060200190611398929190614af1565b5060808201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555090505042600360008b815260200190815260200160002081905550600260008a815260200190815260200160002060000160009054906101000a900460ff16600281111561140a57fe5b600260008b815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7997f98c4555f29a1b69504bcfc3c1c6ec6ed49580cc4264856a4bb6348137aa8b6040518082815260200191505060405180910390a3505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461153d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614c6e6028913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60003060008484604051602001808573ffffffffffffffffffffffffffffffffffffffff16815260200184600181111561158c57fe5b8152602001838152602001826fffffffffffffffffffffffffffffffff1916815260200194505050505060405160208183030381529060405280519060200120905092915050565b6005818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b81813381600281111561161957fe5b6001600085815260200190815260200160002060000160009054906101000a900460ff16600281111561164857fe5b146116bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6173736574206e6f74206f776e656420627920746865206e6574776f726b000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6173736574206e6f74206f776e6564000000000000000000000000000000000081525060200191505060405180910390fd5b84600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561186c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6173736574206e6f7420636c61696d656400000000000000000000000000000081525060200191505060405180910390fd5b6118758661453f565b505050505050565b60005b8151811015611993576203f4806003600084848151811061189d57fe5b60200260200101518152602001908152602001600020540142111561198657600260008383815181106118cc57fe5b60200260200101518152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160156101000a81549060ff02191690556001820160006119429190614aa9565b6002820160006101000a81549063ffffffff021916905550506003600083838151811061196b57fe5b60200260200101518152602001908152602001600020600090555b8080600101915050611880565b5050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206e6f74206f6e2077686974656c69737400000000000000000081525060200191505060405180910390fd5b60008282905011611acf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6465736372697074696f6e2063616e6e6f7420626520656d707479000000000081525060200191505060405180910390fd5b6000600460008560ff1660ff16815260200190815260200160002080546001816001161561010002031660029004905014611b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6170706c69636174696f6e20616c72656164792072656769737465726564000081525060200191505060405180910390fd5b8181600460008660ff1660ff1681526020019081526020016000209190611b9a929190614b71565b508260058383604051808383808284378083019250505092505050908152602001604051809103902060006101000a81548160ff021916908360ff1602179055508260ff167f5844b6e7ad19197bec4773f4f163a206a9f349874e64b328e007c47a583a83d5838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a2505050565b60046020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cef5780601f10611cc457610100808354040283529160200191611cef565b820191906000526020600020905b815481529060010190602001808311611cd257829003601f168201915b505050505081565b60075481565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160159054906101000a900460ff1690806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611df55780601f10611dca57610100808354040283529160200191611df5565b820191906000526020600020905b815481529060010190602001808311611dd857829003601f168201915b5050505050908060020160009054906101000a900463ffffffff16905085565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915054906101000a900460ff1681565b846000801b811415611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c69642068617368000000000000000000000000000000000000000081525060200191505060405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f617373657420616c72656164792072656769737465726564000000000000000081525060200191505060405180910390fd5b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506005815111612068576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642070617468537065630000000000000000000000000000000081525060200191505060405180910390fd5b838063ffffffff1642106120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f657870697265734174206d75737420626520696e20746865206675747572650081525060200191505060405180910390fd5b876000600460008360ff1660ff1681526020019081526020016000208054600181600116156101000203166002900490501415612189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6170706c69636174696f6e206e6f74207265676973746572656400000000000081525060200191505060405180910390fd5b6040518060a001604052808c60028111156121a057fe5b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018a60ff16815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018763ffffffff16815250600160008c815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600281111561225557fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160000160156101000a81548160ff021916908360ff16021790555060608201518160010190805190602001906122de929190614af1565b5060808201518160020160006101000a81548163ffffffff021916908363ffffffff160217905550905050897f13b3af77244e191e093ea8049c1101ea5138cbfcef94b18a2ba38a5d4cf11a878c336040518083600281111561233d57fe5b81526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a25050505050505050505050565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506005815111612433576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642070617468537065630000000000000000000000000000000081525060200191505060405180910390fd5b818063ffffffff1642106124af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f657870697265734174206d75737420626520696e20746865206675747572650081525060200191505060405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6173736574206e6f74207265676973746572656400000000000000000000000081525060200191505060405180910390fd5b88600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612662576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f617373657420616c726561647920636c61696d6564000000000000000000000081525060200191505060405180910390fd5b876000600460008360ff1660ff1681526020019081526020016000208054600181600116156101000203166002900490501415612707576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6170706c69636174696f6e206e6f74207265676973746572656400000000000081525060200191505060405180910390fd5b6040518060a001604052808b600281111561271e57fe5b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018a60ff16815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018763ffffffff16815250600260008d815260200190815260200160002060008201518160000160006101000a81548160ff021916908360028111156127d357fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160000160156101000a81548160ff021916908360ff160217905550606082015181600101908051906020019061285c929190614af1565b5060808201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555090505042600360008d815260200190815260200160002081905550600160008c815260200190815260200160002060000160009054906101000a900460ff1660028111156128ce57fe5b600160008d815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7997f98c4555f29a1b69504bcfc3c1c6ec6ed49580cc4264856a4bb6348137aa8d6040518082815260200191505060405180910390a35050505050505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160159054906101000a900460ff1690806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a575780601f10612a2c57610100808354040283529160200191612a57565b820191906000526020600020905b815481529060010190602001808311612a3a57829003601f168201915b5050505050908060020160009054906101000a900463ffffffff16905085565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506005815111612b33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642070617468537065630000000000000000000000000000000081525060200191505060405180910390fd5b818063ffffffff164210612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f657870697265734174206d75737420626520696e20746865206675747572650081525060200191505060405180910390fd5b8787338073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6173736574206f776e656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b886000600460008360ff1660ff1681526020019081526020016000208054600181600116156101000203166002900490501415612d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6170706c69636174696f6e206e6f74207265676973746572656400000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260008e815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180614c0f6034913960400191505060405180910390fd5b89600260008e815260200190815260200160002060000160156101000a81548160ff021916908360ff1602179055508888600260008f81526020019081526020016000206001019190612e3d929190614b71565b5086600260008e815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff160217905550612e7c8c61453f565b505050505050505050505050565b84600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612f63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f617373657420616c72656164792072656769737465726564000000000000000081525060200191505060405180910390fd5b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600581511161301f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642070617468537065630000000000000000000000000000000081525060200191505060405180910390fd5b828063ffffffff16421061309b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f657870697265734174206d75737420626520696e20746865206675747572650081525060200191505060405180910390fd5b6000801b881415613114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c69642068617368000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600460008960ff1660ff16815260200190815260200160002080546001816001161561010002031660029004905014156131b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f756e6b6e6f776e206170706c69636174696f6e0000000000000000000000000081525060200191505060405180910390fd5b600060016131c68a8d611556565b8f8f8f60405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561321d573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156132cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b6040518060a001604052808b60028111156132e357fe5b81526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018960ff16815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018663ffffffff16815250600160008b815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600281111561339857fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160000160156101000a81548160ff021916908360ff1602179055506060820151816001019080519060200190613421929190614af1565b5060808201518160020160006101000a81548163ffffffff021916908363ffffffff160217905550905050887f13b3af77244e191e093ea8049c1101ea5138cbfcef94b18a2ba38a5d4cf11a878b836040518083600281111561348057fe5b81526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a25050505050505050505050505050565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506005815111613579576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642070617468537065630000000000000000000000000000000081525060200191505060405180910390fd5b818063ffffffff1642106135f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f657870697265734174206d75737420626520696e20746865206675747572650081525060200191505060405180910390fd5b87893381600281111561360457fe5b6001600085815260200190815260200160002060000160009054906101000a900460ff16600281111561363357fe5b146136a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6173736574206e6f74206f776e656420627920746865206e6574776f726b000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461377d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6173736574206e6f74206f776e6564000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613855576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f617373657420616c726561647920636c61696d6564000000000000000000000081525060200191505060405180910390fd5b89600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461392e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f617373657420616c72656164792072656769737465726564000000000000000081525060200191505060405180910390fd5b6000801b8c14156139a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c69642063757272656e74206861736800000000000000000000000081525060200191505060405180910390fd5b6000801b8b1415613a20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c6964206e657720686173680000000000000000000000000000000081525060200191505060405180910390fd5b6000600460008c60ff1660ff1681526020019081526020016000208054600181600116156101000203166002900490501415613ac4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f756e6b6e6f776e206170706c69636174696f6e0000000000000000000000000081525060200191505060405180910390fd5b6040518060a001604052808e6002811115613adb57fe5b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018b60ff1681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018863ffffffff16815250600160008d815260200190815260200160002060008201518160000160006101000a81548160ff02191690836002811115613b9057fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160000160156101000a81548160ff021916908360ff1602179055506060820151816001019080519060200190613c19929190614af1565b5060808201518160020160006101000a81548163ffffffff021916908363ffffffff1602179055509050508b8b7fb5d4eba2eacb304e955df1375729746034777183757f10bdcb249c2eaa76038e8f60405180826002811115613c7857fe5b815260200191505060405180910390a350505050505050505050505050565b818133816002811115613ca657fe5b6001600085815260200190815260200160002060000160009054906101000a900460ff166002811115613cd557fe5b14613d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6173736574206e6f74206f776e656420627920746865206e6574776f726b000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613e1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6173736574206e6f74206f776e6564000000000000000000000000000000000081525060200191505060405180910390fd5b84600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613ef9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6173736574206e6f7420636c61696d656400000000000000000000000000000081525060200191505060405180910390fd5b60026000878152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160156101000a81549060ff0219169055600182016000613f6c9190614aa9565b6002820160006101000a81549063ffffffff021916905550506003600087815260200190815260200160002060009055857f6137dc9923baf8633ade74cf103f8dd5f29a8948866faa456fd527e5aa23261360405160405180910390a2505050505050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16614090576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206e6f74206f6e2077686974656c69737400000000000000000081525060200191505060405180910390fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b8181338160028111156140fa57fe5b6001600085815260200190815260200160002060000160009054906101000a900460ff16600281111561412957fe5b1461419c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6173736574206e6f74206f776e656420627920746865206e6574776f726b000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6173736574206e6f74206f776e6564000000000000000000000000000000000081525060200191505060405180910390fd5b84600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461434c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f617373657420616c726561647920636c61696d6564000000000000000000000081525060200191505060405180910390fd5b60016000878152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160156101000a81549060ff02191690556001820160006143bf9190614aa9565b6002820160006101000a81549063ffffffff02191690555050857f22ced05e2a8c120ab8dbb2d8bff75c90683795bba4268b3e549ed50542cc78c160405160405180910390a2505050505050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166144cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206e6f74206f6e2077686974656c69737400000000000000000081525060200191505060405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60036020528060005260406000206000915090505481565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156145ac57fe5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561461957fe5b60006001600083815260200190815260200160002090506000600260008481526020019081526020016000209050827f4e9328cb9fd3ff9c95b201e40c1741b959429f623a270159d664d7448d10e44c8360000160009054906101000a900460ff168460000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900460ff168560000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808560028111156146e757fe5b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183600281111561471457fe5b81526020018273ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a260016000848152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160156101000a81549060ff02191690556001820160006147b69190614aa9565b6002820160006101000a81549063ffffffff021916905550506040518060a001604052808260000160009054906101000a900460ff1660028111156147f757fe5b81526020018260000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260000160159054906101000a900460ff1660ff168152602001826001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148ee5780601f106148c3576101008083540402835291602001916148ee565b820191906000526020600020905b8154815290600101906020018083116148d157829003601f168201915b505050505081526020018260020160009054906101000a900463ffffffff1663ffffffff168152506001600085815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600281111561494d57fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160000160156101000a81548160ff021916908360ff16021790555060608201518160010190805190602001906149d6929190614af1565b5060808201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555090505060026000848152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160156101000a81549060ff0219169055600182016000614a749190614aa9565b6002820160006101000a81549063ffffffff021916905550506003600084815260200190815260200160002060009055505050565b50805460018160011615610100020316600290046000825580601f10614acf5750614aee565b601f016020900490600052602060002090810190614aed9190614bf1565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614b3257805160ff1916838001178555614b60565b82800160010185558215614b60579182015b82811115614b5f578251825591602001919060010190614b44565b5b509050614b6d9190614bf1565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614bb257803560ff1916838001178555614be0565b82800160010185558215614be0579182015b82811115614bdf578235825591602001919060010190614bc4565b5b509050614bed9190614bf1565b5090565b5b80821115614c0a576000816000905550600101614bf2565b509056fe6173736574206973206e6f74206d61726b656420666f72206f776e657273686970207472616e7366657220746f2073656e64657261737365742063616e6e6f74206265207472616e73666572656420746f2063757272656e74206f776e6572636f6e74726163742063616e206f6e6c792062652064656c65746520627920746865206f776e6572a2646970667358221220541db1ca569b7cb95352c66b669c6144245b67e40d5b14c307227582575c8d8f64736f6c634300060c0033"

// DeployNotary deploys a new Ethereum contract, binding an instance of Notary to it.
func DeployNotary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Notary, error) {
	parsed, err := abi.JSON(strings.NewReader(NotaryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NotaryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Notary{NotaryCaller: NotaryCaller{contract: contract}, NotaryTransactor: NotaryTransactor{contract: contract}, NotaryFilterer: NotaryFilterer{contract: contract}}, nil
}

// Notary is an auto generated Go binding around an Ethereum contract.
type Notary struct {
	NotaryCaller     // Read-only binding to the contract
	NotaryTransactor // Write-only binding to the contract
	NotaryFilterer   // Log filterer for contract events
}

// NotaryCaller is an auto generated read-only Go binding around an Ethereum contract.
type NotaryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NotaryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NotaryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NotaryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NotaryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NotarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NotarySession struct {
	Contract     *Notary           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NotaryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NotaryCallerSession struct {
	Contract *NotaryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// NotaryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NotaryTransactorSession struct {
	Contract     *NotaryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NotaryRaw is an auto generated low-level Go binding around an Ethereum contract.
type NotaryRaw struct {
	Contract *Notary // Generic contract binding to access the raw methods on
}

// NotaryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NotaryCallerRaw struct {
	Contract *NotaryCaller // Generic read-only contract binding to access the raw methods on
}

// NotaryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NotaryTransactorRaw struct {
	Contract *NotaryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNotary creates a new instance of Notary, bound to a specific deployed contract.
func NewNotary(address common.Address, backend bind.ContractBackend) (*Notary, error) {
	contract, err := bindNotary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Notary{NotaryCaller: NotaryCaller{contract: contract}, NotaryTransactor: NotaryTransactor{contract: contract}, NotaryFilterer: NotaryFilterer{contract: contract}}, nil
}

// NewNotaryCaller creates a new read-only instance of Notary, bound to a specific deployed contract.
func NewNotaryCaller(address common.Address, caller bind.ContractCaller) (*NotaryCaller, error) {
	contract, err := bindNotary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NotaryCaller{contract: contract}, nil
}

// NewNotaryTransactor creates a new write-only instance of Notary, bound to a specific deployed contract.
func NewNotaryTransactor(address common.Address, transactor bind.ContractTransactor) (*NotaryTransactor, error) {
	contract, err := bindNotary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NotaryTransactor{contract: contract}, nil
}

// NewNotaryFilterer creates a new log filterer instance of Notary, bound to a specific deployed contract.
func NewNotaryFilterer(address common.Address, filterer bind.ContractFilterer) (*NotaryFilterer, error) {
	contract, err := bindNotary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NotaryFilterer{contract: contract}, nil
}

// bindNotary binds a generic wrapper to an already deployed contract.
func bindNotary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NotaryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Notary *NotaryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Notary.Contract.NotaryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Notary *NotaryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Notary.Contract.NotaryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Notary *NotaryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Notary.Contract.NotaryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Notary *NotaryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Notary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Notary *NotaryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Notary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Notary *NotaryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Notary.Contract.contract.Transact(opts, method, params...)
}

// ApplicationByDescription is a free data retrieval call binding the contract method 0x43f45569.
//
// Solidity: function applicationByDescription(string ) view returns(uint8)
func (_Notary *NotaryCaller) ApplicationByDescription(opts *bind.CallOpts, arg0 string) (uint8, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "applicationByDescription", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ApplicationByDescription is a free data retrieval call binding the contract method 0x43f45569.
//
// Solidity: function applicationByDescription(string ) view returns(uint8)
func (_Notary *NotarySession) ApplicationByDescription(arg0 string) (uint8, error) {
	return _Notary.Contract.ApplicationByDescription(&_Notary.CallOpts, arg0)
}

// ApplicationByDescription is a free data retrieval call binding the contract method 0x43f45569.
//
// Solidity: function applicationByDescription(string ) view returns(uint8)
func (_Notary *NotaryCallerSession) ApplicationByDescription(arg0 string) (uint8, error) {
	return _Notary.Contract.ApplicationByDescription(&_Notary.CallOpts, arg0)
}

// Applications is a free data retrieval call binding the contract method 0x68111160.
//
// Solidity: function applications(uint8 ) view returns(string)
func (_Notary *NotaryCaller) Applications(opts *bind.CallOpts, arg0 uint8) (string, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "applications", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Applications is a free data retrieval call binding the contract method 0x68111160.
//
// Solidity: function applications(uint8 ) view returns(string)
func (_Notary *NotarySession) Applications(arg0 uint8) (string, error) {
	return _Notary.Contract.Applications(&_Notary.CallOpts, arg0)
}

// Applications is a free data retrieval call binding the contract method 0x68111160.
//
// Solidity: function applications(uint8 ) view returns(string)
func (_Notary *NotaryCallerSession) Applications(arg0 uint8) (string, error) {
	return _Notary.Contract.Applications(&_Notary.CallOpts, arg0)
}

// Assets is a free data retrieval call binding the contract method 0x9fda5b66.
//
// Solidity: function assets(bytes32 ) view returns(uint8 network, address owner, uint8 app, string pathSpec, uint32 expiresAt)
func (_Notary *NotaryCaller) Assets(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Network   uint8
	Owner     common.Address
	App       uint8
	PathSpec  string
	ExpiresAt uint32
}, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "assets", arg0)

	outstruct := new(struct {
		Network   uint8
		Owner     common.Address
		App       uint8
		PathSpec  string
		ExpiresAt uint32
	})

	outstruct.Network = out[0].(uint8)
	outstruct.Owner = out[1].(common.Address)
	outstruct.App = out[2].(uint8)
	outstruct.PathSpec = out[3].(string)
	outstruct.ExpiresAt = out[4].(uint32)

	return *outstruct, err

}

// Assets is a free data retrieval call binding the contract method 0x9fda5b66.
//
// Solidity: function assets(bytes32 ) view returns(uint8 network, address owner, uint8 app, string pathSpec, uint32 expiresAt)
func (_Notary *NotarySession) Assets(arg0 [32]byte) (struct {
	Network   uint8
	Owner     common.Address
	App       uint8
	PathSpec  string
	ExpiresAt uint32
}, error) {
	return _Notary.Contract.Assets(&_Notary.CallOpts, arg0)
}

// Assets is a free data retrieval call binding the contract method 0x9fda5b66.
//
// Solidity: function assets(bytes32 ) view returns(uint8 network, address owner, uint8 app, string pathSpec, uint32 expiresAt)
func (_Notary *NotaryCallerSession) Assets(arg0 [32]byte) (struct {
	Network   uint8
	Owner     common.Address
	App       uint8
	PathSpec  string
	ExpiresAt uint32
}, error) {
	return _Notary.Contract.Assets(&_Notary.CallOpts, arg0)
}

// DeployedOn is a free data retrieval call binding the contract method 0x73fc8420.
//
// Solidity: function deployedOn() view returns(uint256)
func (_Notary *NotaryCaller) DeployedOn(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "deployedOn")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeployedOn is a free data retrieval call binding the contract method 0x73fc8420.
//
// Solidity: function deployedOn() view returns(uint256)
func (_Notary *NotarySession) DeployedOn() (*big.Int, error) {
	return _Notary.Contract.DeployedOn(&_Notary.CallOpts)
}

// DeployedOn is a free data retrieval call binding the contract method 0x73fc8420.
//
// Solidity: function deployedOn() view returns(uint256)
func (_Notary *NotaryCallerSession) DeployedOn() (*big.Int, error) {
	return _Notary.Contract.DeployedOn(&_Notary.CallOpts)
}

// OnBehalfOfSignHash is a free data retrieval call binding the contract method 0x424aaec2.
//
// Solidity: function onBehalfOfSignHash(bytes32 assetHash, bytes16 nonce) view returns(bytes32)
func (_Notary *NotaryCaller) OnBehalfOfSignHash(opts *bind.CallOpts, assetHash [32]byte, nonce [16]byte) ([32]byte, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "onBehalfOfSignHash", assetHash, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OnBehalfOfSignHash is a free data retrieval call binding the contract method 0x424aaec2.
//
// Solidity: function onBehalfOfSignHash(bytes32 assetHash, bytes16 nonce) view returns(bytes32)
func (_Notary *NotarySession) OnBehalfOfSignHash(assetHash [32]byte, nonce [16]byte) ([32]byte, error) {
	return _Notary.Contract.OnBehalfOfSignHash(&_Notary.CallOpts, assetHash, nonce)
}

// OnBehalfOfSignHash is a free data retrieval call binding the contract method 0x424aaec2.
//
// Solidity: function onBehalfOfSignHash(bytes32 assetHash, bytes16 nonce) view returns(bytes32)
func (_Notary *NotaryCallerSession) OnBehalfOfSignHash(assetHash [32]byte, nonce [16]byte) ([32]byte, error) {
	return _Notary.Contract.OnBehalfOfSignHash(&_Notary.CallOpts, assetHash, nonce)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Notary *NotaryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Notary *NotarySession) Owner() (common.Address, error) {
	return _Notary.Contract.Owner(&_Notary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Notary *NotaryCallerSession) Owner() (common.Address, error) {
	return _Notary.Contract.Owner(&_Notary.CallOpts)
}

// PendingTransfers is a free data retrieval call binding the contract method 0x8d4ab2c0.
//
// Solidity: function pendingTransfers(bytes32 ) view returns(uint8 network, address owner, uint8 app, string pathSpec, uint32 expiresAt)
func (_Notary *NotaryCaller) PendingTransfers(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Network   uint8
	Owner     common.Address
	App       uint8
	PathSpec  string
	ExpiresAt uint32
}, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "pendingTransfers", arg0)

	outstruct := new(struct {
		Network   uint8
		Owner     common.Address
		App       uint8
		PathSpec  string
		ExpiresAt uint32
	})

	outstruct.Network = out[0].(uint8)
	outstruct.Owner = out[1].(common.Address)
	outstruct.App = out[2].(uint8)
	outstruct.PathSpec = out[3].(string)
	outstruct.ExpiresAt = out[4].(uint32)

	return *outstruct, err

}

// PendingTransfers is a free data retrieval call binding the contract method 0x8d4ab2c0.
//
// Solidity: function pendingTransfers(bytes32 ) view returns(uint8 network, address owner, uint8 app, string pathSpec, uint32 expiresAt)
func (_Notary *NotarySession) PendingTransfers(arg0 [32]byte) (struct {
	Network   uint8
	Owner     common.Address
	App       uint8
	PathSpec  string
	ExpiresAt uint32
}, error) {
	return _Notary.Contract.PendingTransfers(&_Notary.CallOpts, arg0)
}

// PendingTransfers is a free data retrieval call binding the contract method 0x8d4ab2c0.
//
// Solidity: function pendingTransfers(bytes32 ) view returns(uint8 network, address owner, uint8 app, string pathSpec, uint32 expiresAt)
func (_Notary *NotaryCallerSession) PendingTransfers(arg0 [32]byte) (struct {
	Network   uint8
	Owner     common.Address
	App       uint8
	PathSpec  string
	ExpiresAt uint32
}, error) {
	return _Notary.Contract.PendingTransfers(&_Notary.CallOpts, arg0)
}

// PendingTransfersTimestamp is a free data retrieval call binding the contract method 0xed5decd6.
//
// Solidity: function pendingTransfersTimestamp(bytes32 ) view returns(uint256)
func (_Notary *NotaryCaller) PendingTransfersTimestamp(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "pendingTransfersTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingTransfersTimestamp is a free data retrieval call binding the contract method 0xed5decd6.
//
// Solidity: function pendingTransfersTimestamp(bytes32 ) view returns(uint256)
func (_Notary *NotarySession) PendingTransfersTimestamp(arg0 [32]byte) (*big.Int, error) {
	return _Notary.Contract.PendingTransfersTimestamp(&_Notary.CallOpts, arg0)
}

// PendingTransfersTimestamp is a free data retrieval call binding the contract method 0xed5decd6.
//
// Solidity: function pendingTransfersTimestamp(bytes32 ) view returns(uint256)
func (_Notary *NotaryCallerSession) PendingTransfersTimestamp(arg0 [32]byte) (*big.Int, error) {
	return _Notary.Contract.PendingTransfersTimestamp(&_Notary.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Notary *NotaryCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Notary.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Notary *NotarySession) Whitelist(arg0 common.Address) (bool, error) {
	return _Notary.Contract.Whitelist(&_Notary.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Notary *NotaryCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Notary.Contract.Whitelist(&_Notary.CallOpts, arg0)
}

// AcceptClaim is a paid mutator transaction binding the contract method 0x49f60a82.
//
// Solidity: function acceptClaim(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactor) AcceptClaim(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "acceptClaim", hash, myNetwork)
}

// AcceptClaim is a paid mutator transaction binding the contract method 0x49f60a82.
//
// Solidity: function acceptClaim(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotarySession) AcceptClaim(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.AcceptClaim(&_Notary.TransactOpts, hash, myNetwork)
}

// AcceptClaim is a paid mutator transaction binding the contract method 0x49f60a82.
//
// Solidity: function acceptClaim(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactorSession) AcceptClaim(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.AcceptClaim(&_Notary.TransactOpts, hash, myNetwork)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0xb5726202.
//
// Solidity: function acceptOwnership(bytes32 hash, uint8 myNetwork, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactor) AcceptOwnership(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "acceptOwnership", hash, myNetwork, app, pathSpec, expiresAt)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0xb5726202.
//
// Solidity: function acceptOwnership(bytes32 hash, uint8 myNetwork, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotarySession) AcceptOwnership(hash [32]byte, myNetwork uint8, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.AcceptOwnership(&_Notary.TransactOpts, hash, myNetwork, app, pathSpec, expiresAt)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0xb5726202.
//
// Solidity: function acceptOwnership(bytes32 hash, uint8 myNetwork, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactorSession) AcceptOwnership(hash [32]byte, myNetwork uint8, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.AcceptOwnership(&_Notary.TransactOpts, hash, myNetwork, app, pathSpec, expiresAt)
}

// AddToWhitelist is a paid mutator transaction binding the contract method 0xe43252d7.
//
// Solidity: function addToWhitelist(address admin) returns()
func (_Notary *NotaryTransactor) AddToWhitelist(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "addToWhitelist", admin)
}

// AddToWhitelist is a paid mutator transaction binding the contract method 0xe43252d7.
//
// Solidity: function addToWhitelist(address admin) returns()
func (_Notary *NotarySession) AddToWhitelist(admin common.Address) (*types.Transaction, error) {
	return _Notary.Contract.AddToWhitelist(&_Notary.TransactOpts, admin)
}

// AddToWhitelist is a paid mutator transaction binding the contract method 0xe43252d7.
//
// Solidity: function addToWhitelist(address admin) returns()
func (_Notary *NotaryTransactorSession) AddToWhitelist(admin common.Address) (*types.Transaction, error) {
	return _Notary.Contract.AddToWhitelist(&_Notary.TransactOpts, admin)
}

// CancelTransferOwnership is a paid mutator transaction binding the contract method 0x4bf87862.
//
// Solidity: function cancelTransferOwnership(bytes32[] hashes) returns()
func (_Notary *NotaryTransactor) CancelTransferOwnership(opts *bind.TransactOpts, hashes [][32]byte) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "cancelTransferOwnership", hashes)
}

// CancelTransferOwnership is a paid mutator transaction binding the contract method 0x4bf87862.
//
// Solidity: function cancelTransferOwnership(bytes32[] hashes) returns()
func (_Notary *NotarySession) CancelTransferOwnership(hashes [][32]byte) (*types.Transaction, error) {
	return _Notary.Contract.CancelTransferOwnership(&_Notary.TransactOpts, hashes)
}

// CancelTransferOwnership is a paid mutator transaction binding the contract method 0x4bf87862.
//
// Solidity: function cancelTransferOwnership(bytes32[] hashes) returns()
func (_Notary *NotaryTransactorSession) CancelTransferOwnership(hashes [][32]byte) (*types.Transaction, error) {
	return _Notary.Contract.CancelTransferOwnership(&_Notary.TransactOpts, hashes)
}

// ClaimAsset is a paid mutator transaction binding the contract method 0x9f5d6fc2.
//
// Solidity: function claimAsset(bytes32 hash, uint8 myNetwork, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactor) ClaimAsset(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "claimAsset", hash, myNetwork, app, pathSpec, expiresAt)
}

// ClaimAsset is a paid mutator transaction binding the contract method 0x9f5d6fc2.
//
// Solidity: function claimAsset(bytes32 hash, uint8 myNetwork, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotarySession) ClaimAsset(hash [32]byte, myNetwork uint8, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.ClaimAsset(&_Notary.TransactOpts, hash, myNetwork, app, pathSpec, expiresAt)
}

// ClaimAsset is a paid mutator transaction binding the contract method 0x9f5d6fc2.
//
// Solidity: function claimAsset(bytes32 hash, uint8 myNetwork, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactorSession) ClaimAsset(hash [32]byte, myNetwork uint8, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.ClaimAsset(&_Notary.TransactOpts, hash, myNetwork, app, pathSpec, expiresAt)
}

// DeleteAsset is a paid mutator transaction binding the contract method 0xec11498e.
//
// Solidity: function deleteAsset(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactor) DeleteAsset(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "deleteAsset", hash, myNetwork)
}

// DeleteAsset is a paid mutator transaction binding the contract method 0xec11498e.
//
// Solidity: function deleteAsset(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotarySession) DeleteAsset(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.DeleteAsset(&_Notary.TransactOpts, hash, myNetwork)
}

// DeleteAsset is a paid mutator transaction binding the contract method 0xec11498e.
//
// Solidity: function deleteAsset(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactorSession) DeleteAsset(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.DeleteAsset(&_Notary.TransactOpts, hash, myNetwork)
}

// DeleteFromWhitelist is a paid mutator transaction binding the contract method 0xecfb5d17.
//
// Solidity: function deleteFromWhitelist(address admin) returns()
func (_Notary *NotaryTransactor) DeleteFromWhitelist(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "deleteFromWhitelist", admin)
}

// DeleteFromWhitelist is a paid mutator transaction binding the contract method 0xecfb5d17.
//
// Solidity: function deleteFromWhitelist(address admin) returns()
func (_Notary *NotarySession) DeleteFromWhitelist(admin common.Address) (*types.Transaction, error) {
	return _Notary.Contract.DeleteFromWhitelist(&_Notary.TransactOpts, admin)
}

// DeleteFromWhitelist is a paid mutator transaction binding the contract method 0xecfb5d17.
//
// Solidity: function deleteFromWhitelist(address admin) returns()
func (_Notary *NotaryTransactorSession) DeleteFromWhitelist(admin common.Address) (*types.Transaction, error) {
	return _Notary.Contract.DeleteFromWhitelist(&_Notary.TransactOpts, admin)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Notary *NotaryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Notary *NotarySession) Kill() (*types.Transaction, error) {
	return _Notary.Contract.Kill(&_Notary.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Notary *NotaryTransactorSession) Kill() (*types.Transaction, error) {
	return _Notary.Contract.Kill(&_Notary.TransactOpts)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0x54c7bd8c.
//
// Solidity: function registerApplication(uint8 appId, string description) returns()
func (_Notary *NotaryTransactor) RegisterApplication(opts *bind.TransactOpts, appId uint8, description string) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "registerApplication", appId, description)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0x54c7bd8c.
//
// Solidity: function registerApplication(uint8 appId, string description) returns()
func (_Notary *NotarySession) RegisterApplication(appId uint8, description string) (*types.Transaction, error) {
	return _Notary.Contract.RegisterApplication(&_Notary.TransactOpts, appId, description)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0x54c7bd8c.
//
// Solidity: function registerApplication(uint8 appId, string description) returns()
func (_Notary *NotaryTransactorSession) RegisterApplication(appId uint8, description string) (*types.Transaction, error) {
	return _Notary.Contract.RegisterApplication(&_Notary.TransactOpts, appId, description)
}

// RegisterAsset is a paid mutator transaction binding the contract method 0x9c7331cd.
//
// Solidity: function registerAsset(uint8 myNetwork, bytes32 hash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactor) RegisterAsset(opts *bind.TransactOpts, myNetwork uint8, hash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "registerAsset", myNetwork, hash, app, pathSpec, expiresAt)
}

// RegisterAsset is a paid mutator transaction binding the contract method 0x9c7331cd.
//
// Solidity: function registerAsset(uint8 myNetwork, bytes32 hash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotarySession) RegisterAsset(myNetwork uint8, hash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.RegisterAsset(&_Notary.TransactOpts, myNetwork, hash, app, pathSpec, expiresAt)
}

// RegisterAsset is a paid mutator transaction binding the contract method 0x9c7331cd.
//
// Solidity: function registerAsset(uint8 myNetwork, bytes32 hash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactorSession) RegisterAsset(myNetwork uint8, hash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.RegisterAsset(&_Notary.TransactOpts, myNetwork, hash, app, pathSpec, expiresAt)
}

// RegisterAssetOnBehalf is a paid mutator transaction binding the contract method 0xbe3dfeca.
//
// Solidity: function registerAssetOnBehalf(uint8 v, bytes32 r, bytes32 s, bytes16 nonce, uint8 myNetwork, bytes32 hash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactor) RegisterAssetOnBehalf(opts *bind.TransactOpts, v uint8, r [32]byte, s [32]byte, nonce [16]byte, myNetwork uint8, hash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "registerAssetOnBehalf", v, r, s, nonce, myNetwork, hash, app, pathSpec, expiresAt)
}

// RegisterAssetOnBehalf is a paid mutator transaction binding the contract method 0xbe3dfeca.
//
// Solidity: function registerAssetOnBehalf(uint8 v, bytes32 r, bytes32 s, bytes16 nonce, uint8 myNetwork, bytes32 hash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotarySession) RegisterAssetOnBehalf(v uint8, r [32]byte, s [32]byte, nonce [16]byte, myNetwork uint8, hash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.RegisterAssetOnBehalf(&_Notary.TransactOpts, v, r, s, nonce, myNetwork, hash, app, pathSpec, expiresAt)
}

// RegisterAssetOnBehalf is a paid mutator transaction binding the contract method 0xbe3dfeca.
//
// Solidity: function registerAssetOnBehalf(uint8 v, bytes32 r, bytes32 s, bytes16 nonce, uint8 myNetwork, bytes32 hash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactorSession) RegisterAssetOnBehalf(v uint8, r [32]byte, s [32]byte, nonce [16]byte, myNetwork uint8, hash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.RegisterAssetOnBehalf(&_Notary.TransactOpts, v, r, s, nonce, myNetwork, hash, app, pathSpec, expiresAt)
}

// RejectClaim is a paid mutator transaction binding the contract method 0xd278d864.
//
// Solidity: function rejectClaim(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactor) RejectClaim(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "rejectClaim", hash, myNetwork)
}

// RejectClaim is a paid mutator transaction binding the contract method 0xd278d864.
//
// Solidity: function rejectClaim(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotarySession) RejectClaim(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.RejectClaim(&_Notary.TransactOpts, hash, myNetwork)
}

// RejectClaim is a paid mutator transaction binding the contract method 0xd278d864.
//
// Solidity: function rejectClaim(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactorSession) RejectClaim(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.RejectClaim(&_Notary.TransactOpts, hash, myNetwork)
}

// RejectOwnership is a paid mutator transaction binding the contract method 0x151b29d0.
//
// Solidity: function rejectOwnership(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactor) RejectOwnership(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "rejectOwnership", hash, myNetwork)
}

// RejectOwnership is a paid mutator transaction binding the contract method 0x151b29d0.
//
// Solidity: function rejectOwnership(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotarySession) RejectOwnership(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.RejectOwnership(&_Notary.TransactOpts, hash, myNetwork)
}

// RejectOwnership is a paid mutator transaction binding the contract method 0x151b29d0.
//
// Solidity: function rejectOwnership(bytes32 hash, uint8 myNetwork) returns()
func (_Notary *NotaryTransactorSession) RejectOwnership(hash [32]byte, myNetwork uint8) (*types.Transaction, error) {
	return _Notary.Contract.RejectOwnership(&_Notary.TransactOpts, hash, myNetwork)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0x2e2a9280.
//
// Solidity: function transferOwnership(bytes32 hash, uint8 myNetwork, uint8 newNetwork, address newOwner) returns()
func (_Notary *NotaryTransactor) TransferOwnership(opts *bind.TransactOpts, hash [32]byte, myNetwork uint8, newNetwork uint8, newOwner common.Address) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "transferOwnership", hash, myNetwork, newNetwork, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0x2e2a9280.
//
// Solidity: function transferOwnership(bytes32 hash, uint8 myNetwork, uint8 newNetwork, address newOwner) returns()
func (_Notary *NotarySession) TransferOwnership(hash [32]byte, myNetwork uint8, newNetwork uint8, newOwner common.Address) (*types.Transaction, error) {
	return _Notary.Contract.TransferOwnership(&_Notary.TransactOpts, hash, myNetwork, newNetwork, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0x2e2a9280.
//
// Solidity: function transferOwnership(bytes32 hash, uint8 myNetwork, uint8 newNetwork, address newOwner) returns()
func (_Notary *NotaryTransactorSession) TransferOwnership(hash [32]byte, myNetwork uint8, newNetwork uint8, newOwner common.Address) (*types.Transaction, error) {
	return _Notary.Contract.TransferOwnership(&_Notary.TransactOpts, hash, myNetwork, newNetwork, newOwner)
}

// UpdateAsset is a paid mutator transaction binding the contract method 0xc63a4d42.
//
// Solidity: function updateAsset(uint8 myNetwork, bytes32 currentHash, bytes32 newHash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactor) UpdateAsset(opts *bind.TransactOpts, myNetwork uint8, currentHash [32]byte, newHash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.contract.Transact(opts, "updateAsset", myNetwork, currentHash, newHash, app, pathSpec, expiresAt)
}

// UpdateAsset is a paid mutator transaction binding the contract method 0xc63a4d42.
//
// Solidity: function updateAsset(uint8 myNetwork, bytes32 currentHash, bytes32 newHash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotarySession) UpdateAsset(myNetwork uint8, currentHash [32]byte, newHash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.UpdateAsset(&_Notary.TransactOpts, myNetwork, currentHash, newHash, app, pathSpec, expiresAt)
}

// UpdateAsset is a paid mutator transaction binding the contract method 0xc63a4d42.
//
// Solidity: function updateAsset(uint8 myNetwork, bytes32 currentHash, bytes32 newHash, uint8 app, string pathSpec, uint32 expiresAt) returns()
func (_Notary *NotaryTransactorSession) UpdateAsset(myNetwork uint8, currentHash [32]byte, newHash [32]byte, app uint8, pathSpec string, expiresAt uint32) (*types.Transaction, error) {
	return _Notary.Contract.UpdateAsset(&_Notary.TransactOpts, myNetwork, currentHash, newHash, app, pathSpec, expiresAt)
}

// NotaryApplicationRegisteredIterator is returned from FilterApplicationRegistered and is used to iterate over the raw logs and unpacked data for ApplicationRegistered events raised by the Notary contract.
type NotaryApplicationRegisteredIterator struct {
	Event *NotaryApplicationRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryApplicationRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryApplicationRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryApplicationRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryApplicationRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryApplicationRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryApplicationRegistered represents a ApplicationRegistered event raised by the Notary contract.
type NotaryApplicationRegistered struct {
	AppId       uint8
	Description string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterApplicationRegistered is a free log retrieval operation binding the contract event 0x5844b6e7ad19197bec4773f4f163a206a9f349874e64b328e007c47a583a83d5.
//
// Solidity: event ApplicationRegistered(uint8 indexed appId, string description)
func (_Notary *NotaryFilterer) FilterApplicationRegistered(opts *bind.FilterOpts, appId []uint8) (*NotaryApplicationRegisteredIterator, error) {

	var appIdRule []interface{}
	for _, appIdItem := range appId {
		appIdRule = append(appIdRule, appIdItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "ApplicationRegistered", appIdRule)
	if err != nil {
		return nil, err
	}
	return &NotaryApplicationRegisteredIterator{contract: _Notary.contract, event: "ApplicationRegistered", logs: logs, sub: sub}, nil
}

// WatchApplicationRegistered is a free log subscription operation binding the contract event 0x5844b6e7ad19197bec4773f4f163a206a9f349874e64b328e007c47a583a83d5.
//
// Solidity: event ApplicationRegistered(uint8 indexed appId, string description)
func (_Notary *NotaryFilterer) WatchApplicationRegistered(opts *bind.WatchOpts, sink chan<- *NotaryApplicationRegistered, appId []uint8) (event.Subscription, error) {

	var appIdRule []interface{}
	for _, appIdItem := range appId {
		appIdRule = append(appIdRule, appIdItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "ApplicationRegistered", appIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryApplicationRegistered)
				if err := _Notary.contract.UnpackLog(event, "ApplicationRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplicationRegistered is a log parse operation binding the contract event 0x5844b6e7ad19197bec4773f4f163a206a9f349874e64b328e007c47a583a83d5.
//
// Solidity: event ApplicationRegistered(uint8 indexed appId, string description)
func (_Notary *NotaryFilterer) ParseApplicationRegistered(log types.Log) (*NotaryApplicationRegistered, error) {
	event := new(NotaryApplicationRegistered)
	if err := _Notary.contract.UnpackLog(event, "ApplicationRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NotaryAssetClaimRejectedIterator is returned from FilterAssetClaimRejected and is used to iterate over the raw logs and unpacked data for AssetClaimRejected events raised by the Notary contract.
type NotaryAssetClaimRejectedIterator struct {
	Event *NotaryAssetClaimRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryAssetClaimRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryAssetClaimRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryAssetClaimRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryAssetClaimRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryAssetClaimRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryAssetClaimRejected represents a AssetClaimRejected event raised by the Notary contract.
type NotaryAssetClaimRejected struct {
	Hash [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAssetClaimRejected is a free log retrieval operation binding the contract event 0x6137dc9923baf8633ade74cf103f8dd5f29a8948866faa456fd527e5aa232613.
//
// Solidity: event AssetClaimRejected(bytes32 indexed hash)
func (_Notary *NotaryFilterer) FilterAssetClaimRejected(opts *bind.FilterOpts, hash [][32]byte) (*NotaryAssetClaimRejectedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "AssetClaimRejected", hashRule)
	if err != nil {
		return nil, err
	}
	return &NotaryAssetClaimRejectedIterator{contract: _Notary.contract, event: "AssetClaimRejected", logs: logs, sub: sub}, nil
}

// WatchAssetClaimRejected is a free log subscription operation binding the contract event 0x6137dc9923baf8633ade74cf103f8dd5f29a8948866faa456fd527e5aa232613.
//
// Solidity: event AssetClaimRejected(bytes32 indexed hash)
func (_Notary *NotaryFilterer) WatchAssetClaimRejected(opts *bind.WatchOpts, sink chan<- *NotaryAssetClaimRejected, hash [][32]byte) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "AssetClaimRejected", hashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryAssetClaimRejected)
				if err := _Notary.contract.UnpackLog(event, "AssetClaimRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetClaimRejected is a log parse operation binding the contract event 0x6137dc9923baf8633ade74cf103f8dd5f29a8948866faa456fd527e5aa232613.
//
// Solidity: event AssetClaimRejected(bytes32 indexed hash)
func (_Notary *NotaryFilterer) ParseAssetClaimRejected(log types.Log) (*NotaryAssetClaimRejected, error) {
	event := new(NotaryAssetClaimRejected)
	if err := _Notary.contract.UnpackLog(event, "AssetClaimRejected", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NotaryAssetDeletedIterator is returned from FilterAssetDeleted and is used to iterate over the raw logs and unpacked data for AssetDeleted events raised by the Notary contract.
type NotaryAssetDeletedIterator struct {
	Event *NotaryAssetDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryAssetDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryAssetDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryAssetDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryAssetDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryAssetDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryAssetDeleted represents a AssetDeleted event raised by the Notary contract.
type NotaryAssetDeleted struct {
	Hash [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAssetDeleted is a free log retrieval operation binding the contract event 0x22ced05e2a8c120ab8dbb2d8bff75c90683795bba4268b3e549ed50542cc78c1.
//
// Solidity: event AssetDeleted(bytes32 indexed hash)
func (_Notary *NotaryFilterer) FilterAssetDeleted(opts *bind.FilterOpts, hash [][32]byte) (*NotaryAssetDeletedIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "AssetDeleted", hashRule)
	if err != nil {
		return nil, err
	}
	return &NotaryAssetDeletedIterator{contract: _Notary.contract, event: "AssetDeleted", logs: logs, sub: sub}, nil
}

// WatchAssetDeleted is a free log subscription operation binding the contract event 0x22ced05e2a8c120ab8dbb2d8bff75c90683795bba4268b3e549ed50542cc78c1.
//
// Solidity: event AssetDeleted(bytes32 indexed hash)
func (_Notary *NotaryFilterer) WatchAssetDeleted(opts *bind.WatchOpts, sink chan<- *NotaryAssetDeleted, hash [][32]byte) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "AssetDeleted", hashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryAssetDeleted)
				if err := _Notary.contract.UnpackLog(event, "AssetDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetDeleted is a log parse operation binding the contract event 0x22ced05e2a8c120ab8dbb2d8bff75c90683795bba4268b3e549ed50542cc78c1.
//
// Solidity: event AssetDeleted(bytes32 indexed hash)
func (_Notary *NotaryFilterer) ParseAssetDeleted(log types.Log) (*NotaryAssetDeleted, error) {
	event := new(NotaryAssetDeleted)
	if err := _Notary.contract.UnpackLog(event, "AssetDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NotaryAssetNewClaimIterator is returned from FilterAssetNewClaim and is used to iterate over the raw logs and unpacked data for AssetNewClaim events raised by the Notary contract.
type NotaryAssetNewClaimIterator struct {
	Event *NotaryAssetNewClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryAssetNewClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryAssetNewClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryAssetNewClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryAssetNewClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryAssetNewClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryAssetNewClaim represents a AssetNewClaim event raised by the Notary contract.
type NotaryAssetNewClaim struct {
	Hash    [32]byte
	Addr    common.Address
	Network uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAssetNewClaim is a free log retrieval operation binding the contract event 0x7997f98c4555f29a1b69504bcfc3c1c6ec6ed49580cc4264856a4bb6348137aa.
//
// Solidity: event AssetNewClaim(bytes32 hash, address indexed addr, uint8 indexed network)
func (_Notary *NotaryFilterer) FilterAssetNewClaim(opts *bind.FilterOpts, addr []common.Address, network []uint8) (*NotaryAssetNewClaimIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var networkRule []interface{}
	for _, networkItem := range network {
		networkRule = append(networkRule, networkItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "AssetNewClaim", addrRule, networkRule)
	if err != nil {
		return nil, err
	}
	return &NotaryAssetNewClaimIterator{contract: _Notary.contract, event: "AssetNewClaim", logs: logs, sub: sub}, nil
}

// WatchAssetNewClaim is a free log subscription operation binding the contract event 0x7997f98c4555f29a1b69504bcfc3c1c6ec6ed49580cc4264856a4bb6348137aa.
//
// Solidity: event AssetNewClaim(bytes32 hash, address indexed addr, uint8 indexed network)
func (_Notary *NotaryFilterer) WatchAssetNewClaim(opts *bind.WatchOpts, sink chan<- *NotaryAssetNewClaim, addr []common.Address, network []uint8) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var networkRule []interface{}
	for _, networkItem := range network {
		networkRule = append(networkRule, networkItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "AssetNewClaim", addrRule, networkRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryAssetNewClaim)
				if err := _Notary.contract.UnpackLog(event, "AssetNewClaim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetNewClaim is a log parse operation binding the contract event 0x7997f98c4555f29a1b69504bcfc3c1c6ec6ed49580cc4264856a4bb6348137aa.
//
// Solidity: event AssetNewClaim(bytes32 hash, address indexed addr, uint8 indexed network)
func (_Notary *NotaryFilterer) ParseAssetNewClaim(log types.Log) (*NotaryAssetNewClaim, error) {
	event := new(NotaryAssetNewClaim)
	if err := _Notary.contract.UnpackLog(event, "AssetNewClaim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NotaryAssetOwnershipTransferredIterator is returned from FilterAssetOwnershipTransferred and is used to iterate over the raw logs and unpacked data for AssetOwnershipTransferred events raised by the Notary contract.
type NotaryAssetOwnershipTransferredIterator struct {
	Event *NotaryAssetOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryAssetOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryAssetOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryAssetOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryAssetOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryAssetOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryAssetOwnershipTransferred represents a AssetOwnershipTransferred event raised by the Notary contract.
type NotaryAssetOwnershipTransferred struct {
	Hash       [32]byte
	OldNetwork uint8
	OldOwner   common.Address
	NewNetwork uint8
	NewOwner   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAssetOwnershipTransferred is a free log retrieval operation binding the contract event 0x4e9328cb9fd3ff9c95b201e40c1741b959429f623a270159d664d7448d10e44c.
//
// Solidity: event AssetOwnershipTransferred(bytes32 indexed hash, uint8 oldNetwork, address oldOwner, uint8 newNetwork, address newOwner)
func (_Notary *NotaryFilterer) FilterAssetOwnershipTransferred(opts *bind.FilterOpts, hash [][32]byte) (*NotaryAssetOwnershipTransferredIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "AssetOwnershipTransferred", hashRule)
	if err != nil {
		return nil, err
	}
	return &NotaryAssetOwnershipTransferredIterator{contract: _Notary.contract, event: "AssetOwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchAssetOwnershipTransferred is a free log subscription operation binding the contract event 0x4e9328cb9fd3ff9c95b201e40c1741b959429f623a270159d664d7448d10e44c.
//
// Solidity: event AssetOwnershipTransferred(bytes32 indexed hash, uint8 oldNetwork, address oldOwner, uint8 newNetwork, address newOwner)
func (_Notary *NotaryFilterer) WatchAssetOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NotaryAssetOwnershipTransferred, hash [][32]byte) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "AssetOwnershipTransferred", hashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryAssetOwnershipTransferred)
				if err := _Notary.contract.UnpackLog(event, "AssetOwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetOwnershipTransferred is a log parse operation binding the contract event 0x4e9328cb9fd3ff9c95b201e40c1741b959429f623a270159d664d7448d10e44c.
//
// Solidity: event AssetOwnershipTransferred(bytes32 indexed hash, uint8 oldNetwork, address oldOwner, uint8 newNetwork, address newOwner)
func (_Notary *NotaryFilterer) ParseAssetOwnershipTransferred(log types.Log) (*NotaryAssetOwnershipTransferred, error) {
	event := new(NotaryAssetOwnershipTransferred)
	if err := _Notary.contract.UnpackLog(event, "AssetOwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NotaryAssetRegisteredIterator is returned from FilterAssetRegistered and is used to iterate over the raw logs and unpacked data for AssetRegistered events raised by the Notary contract.
type NotaryAssetRegisteredIterator struct {
	Event *NotaryAssetRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryAssetRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryAssetRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryAssetRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryAssetRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryAssetRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryAssetRegistered represents a AssetRegistered event raised by the Notary contract.
type NotaryAssetRegistered struct {
	Hash    [32]byte
	Network uint8
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAssetRegistered is a free log retrieval operation binding the contract event 0x13b3af77244e191e093ea8049c1101ea5138cbfcef94b18a2ba38a5d4cf11a87.
//
// Solidity: event AssetRegistered(bytes32 indexed hash, uint8 network, address owner)
func (_Notary *NotaryFilterer) FilterAssetRegistered(opts *bind.FilterOpts, hash [][32]byte) (*NotaryAssetRegisteredIterator, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "AssetRegistered", hashRule)
	if err != nil {
		return nil, err
	}
	return &NotaryAssetRegisteredIterator{contract: _Notary.contract, event: "AssetRegistered", logs: logs, sub: sub}, nil
}

// WatchAssetRegistered is a free log subscription operation binding the contract event 0x13b3af77244e191e093ea8049c1101ea5138cbfcef94b18a2ba38a5d4cf11a87.
//
// Solidity: event AssetRegistered(bytes32 indexed hash, uint8 network, address owner)
func (_Notary *NotaryFilterer) WatchAssetRegistered(opts *bind.WatchOpts, sink chan<- *NotaryAssetRegistered, hash [][32]byte) (event.Subscription, error) {

	var hashRule []interface{}
	for _, hashItem := range hash {
		hashRule = append(hashRule, hashItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "AssetRegistered", hashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryAssetRegistered)
				if err := _Notary.contract.UnpackLog(event, "AssetRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetRegistered is a log parse operation binding the contract event 0x13b3af77244e191e093ea8049c1101ea5138cbfcef94b18a2ba38a5d4cf11a87.
//
// Solidity: event AssetRegistered(bytes32 indexed hash, uint8 network, address owner)
func (_Notary *NotaryFilterer) ParseAssetRegistered(log types.Log) (*NotaryAssetRegistered, error) {
	event := new(NotaryAssetRegistered)
	if err := _Notary.contract.UnpackLog(event, "AssetRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NotaryAssetUpdatedIterator is returned from FilterAssetUpdated and is used to iterate over the raw logs and unpacked data for AssetUpdated events raised by the Notary contract.
type NotaryAssetUpdatedIterator struct {
	Event *NotaryAssetUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NotaryAssetUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NotaryAssetUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NotaryAssetUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NotaryAssetUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NotaryAssetUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NotaryAssetUpdated represents a AssetUpdated event raised by the Notary contract.
type NotaryAssetUpdated struct {
	NewHash      [32]byte
	PreviousHash [32]byte
	Network      uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAssetUpdated is a free log retrieval operation binding the contract event 0xb5d4eba2eacb304e955df1375729746034777183757f10bdcb249c2eaa76038e.
//
// Solidity: event AssetUpdated(bytes32 indexed newHash, bytes32 indexed previousHash, uint8 network)
func (_Notary *NotaryFilterer) FilterAssetUpdated(opts *bind.FilterOpts, newHash [][32]byte, previousHash [][32]byte) (*NotaryAssetUpdatedIterator, error) {

	var newHashRule []interface{}
	for _, newHashItem := range newHash {
		newHashRule = append(newHashRule, newHashItem)
	}
	var previousHashRule []interface{}
	for _, previousHashItem := range previousHash {
		previousHashRule = append(previousHashRule, previousHashItem)
	}

	logs, sub, err := _Notary.contract.FilterLogs(opts, "AssetUpdated", newHashRule, previousHashRule)
	if err != nil {
		return nil, err
	}
	return &NotaryAssetUpdatedIterator{contract: _Notary.contract, event: "AssetUpdated", logs: logs, sub: sub}, nil
}

// WatchAssetUpdated is a free log subscription operation binding the contract event 0xb5d4eba2eacb304e955df1375729746034777183757f10bdcb249c2eaa76038e.
//
// Solidity: event AssetUpdated(bytes32 indexed newHash, bytes32 indexed previousHash, uint8 network)
func (_Notary *NotaryFilterer) WatchAssetUpdated(opts *bind.WatchOpts, sink chan<- *NotaryAssetUpdated, newHash [][32]byte, previousHash [][32]byte) (event.Subscription, error) {

	var newHashRule []interface{}
	for _, newHashItem := range newHash {
		newHashRule = append(newHashRule, newHashItem)
	}
	var previousHashRule []interface{}
	for _, previousHashItem := range previousHash {
		previousHashRule = append(previousHashRule, previousHashItem)
	}

	logs, sub, err := _Notary.contract.WatchLogs(opts, "AssetUpdated", newHashRule, previousHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NotaryAssetUpdated)
				if err := _Notary.contract.UnpackLog(event, "AssetUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetUpdated is a log parse operation binding the contract event 0xb5d4eba2eacb304e955df1375729746034777183757f10bdcb249c2eaa76038e.
//
// Solidity: event AssetUpdated(bytes32 indexed newHash, bytes32 indexed previousHash, uint8 network)
func (_Notary *NotaryFilterer) ParseAssetUpdated(log types.Log) (*NotaryAssetUpdated, error) {
	event := new(NotaryAssetUpdated)
	if err := _Notary.contract.UnpackLog(event, "AssetUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}
